{"version":3,"sources":["utils.ts","lwc.ts","loader.ts","constants.ts","sdk.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import {\n  CreateLwcInput,\n  MobileMethod,\n  RequestType,\n  CallbackMap,\n  CallbackInput,\n} from './types';\n\n/**\n * Generates LWC config from the url.\n */\nexport const lwcConfigFromUrl = (): CreateLwcInput => {\n  const encodedData = new URLSearchParams(window.location.search).get('data');\n  const data = window.atob(window.decodeURIComponent(encodedData || ''));\n  const {ns, vfns, component, props, refs, methods} = JSON.parse(data);\n\n  return {\n    ns,\n    vfns,\n    component,\n    props,\n    refs,\n    methods,\n  };\n};\n\nexport const generateId = (callbacks: CallbackMap): string => {\n  const id = `${Number(new Date())} ${Math.ceil(Math.random() * 10000000)}`;\n  if (!callbacks.get(id)) {\n    return id;\n  }\n  return generateId(callbacks);\n};\n\nexport const promiseHandler = (\n  resolve: (d: any) => void,\n  reject: (e: string) => void,\n) => (...props: CallbackInput) => {\n  const [responseData, error] = props;\n  if (error) {\n    reject(error);\n  } else {\n    resolve(responseData);\n  }\n};\n\n/**\n * Custom event dispatcher to the native app\n */\nexport const postMessageToNativeApp = (requestType: RequestType, data: any) => {\n  /**\n   *  Prepare data to be sent.\n   */\n  const postMessageData = {\n    ...data,\n    type: requestType,\n  };\n  const messageString = JSON.stringify(postMessageData);\n\n  const win: any = window;\n\n  /**\n   * Will post message to ReactNative.\n   */\n  if (win.ReactNativeWebView) {\n    win.ReactNativeWebView.postMessage(messageString);\n  } else if (win.VlocApp && win.VlocApp.postMessage) {\n    /**\n     * Will post message to Android SDK.\n     */\n    win.VlocApp.postMessage(messageString);\n  } else if (win.nativePostMessage) {\n    /**\n     * Will post message to iOS SDK.\n     */\n    win.nativePostMessage(messageString);\n  } else {\n    /**\n     * Will post message to HTML - iframe.\n     */\n    win.parent.postMessage(postMessageData, '*');\n  }\n};\n\nexport const generateMobileMethods = (\n  keys: string[] | null | undefined,\n  callbacks: CallbackMap,\n): MobileMethod | null => {\n  if (!keys) {\n    return null;\n  }\n  return keys.reduce((current: any, name: string) => {\n    return {\n      ...current,\n      [name]: (...args: any) => {\n        const callId = generateId(callbacks);\n        const data = {\n          callId,\n          args,\n          name,\n        };\n\n        /**\n         * Send data to native.\n         */\n        postMessageToNativeApp('fnCall', data);\n\n        return new Promise<any>((resolve, reject) => {\n          /**\n           * Save the resolver function.\n           */\n          callbacks.set(callId, promiseHandler(resolve, reject));\n        });\n      },\n    };\n  }, {});\n};\n\n/**\n * Converts query selector to array.\n */\nexport const strQueryToArray = (target: string[] | string) => {\n  if (Array.isArray(target)) {\n    return target;\n  }\n  /*\n   * Due to url encoding, spaces are converted to +.\n   */\n  return target.replace(/\\+/, ' ').split(' ');\n};\n","import {CreateLwcInput, LwcMobile, SetChildrenOptions} from 'types';\nimport {strQueryToArray} from './utils';\n\n/**\n * Creates the LWC.\n */\nexport const createLwc = (\n  lwcConfig: CreateLwcInput,\n  callback: (\n    element: LwcMobile,\n    status: string,\n    lwcConfig: CreateLwcInput,\n  ) => void,\n) => {\n  const {vfns, ns, component, props} = lwcConfig;\n  const auraComponent = `${vfns || ns}:ltngOutVF`;\n\n  const onLoad = () => {\n    const componentName = `${ns}:${component}`;\n    (window as any).$Lightning.createComponent(\n      componentName,\n      props,\n      'lightning',\n      (data: any, status: string) =>\n        callback(data.elements[0], status, lwcConfig),\n    );\n  };\n\n  (window as any).$Lightning.use(auraComponent, onLoad);\n};\n\nexport const setProps = (props: any, elem: any) => {\n  Object.keys(props).forEach((propName) => {\n    elem[propName] = props[propName];\n  });\n};\n\nexport const setChildrenProps = (\n  options: SetChildrenOptions[],\n  lwcElement: LwcMobile,\n) => {\n  options.forEach((item) => {\n    /**\n     * Get the target child element.\n     */\n    const itemElement = strQueryToArray(item.element);\n\n    // TODO: run querySelectorAll on the last element.\n    const targetElement = itemElement.reduce(\n      (currentValue: any, nextValue: string) => {\n        if (currentValue.shadowRoot) {\n          return currentValue.shadowRoot.querySelector(nextValue);\n        }\n        return currentValue.querySelector(nextValue);\n      },\n      lwcElement,\n    );\n\n    /**\n     * Lwc child element.\n     * TODO: should be an array.\n     */\n    if (targetElement) {\n      /**\n       * Apply to target element properties.\n       */\n      setProps(item.props, targetElement);\n\n      /**\n       * targetelement is an input element, the hack is to\n       * explicitly focus on that element, and then blur it.\n       * Usuful on omniscripts since it only listens on blur\n       * event to update the json data.\n       */\n      if (targetElement.focus) {\n        targetElement.focus();\n        setTimeout(() => targetElement.blur(), 0);\n      }\n    }\n  });\n};\n\nexport const removeLwc = (props: any) => {\n  const lwcWrapper = document.getElementById('lightning');\n  if (lwcWrapper) {\n    lwcWrapper.innerHTML = '';\n  }\n};\n","export class Loader {\n  private el: HTMLElement | null;\n\n  constructor() {\n    this.el = document.getElementById('loading');\n  }\n\n  show() {\n    this.toggle('block');\n  }\n\n  hide() {\n    this.toggle('none');\n  }\n\n  toggle(display: 'block' | 'none') {\n    this.el!.style.display = display;\n  }\n}\n","/**\n * All the available omniscript lwc custom events.\n */\nexport const omniEvents = [\n  'omniactiondebug',\n  'omniactionbtn',\n  'omniaggregate',\n  'omniautoadvance',\n  'omnicustomsavestate',\n  'omnifileuploaded',\n  'omniformatteddata',\n  'omniinvalid',\n  'omnimodal',\n  'omnipendingupdates',\n  'omnirefreshseeddata',\n  'omnisavedforlater',\n  'omnisaveforlater',\n  'omnisetinit',\n  'omnisetlookupoptions',\n  'omnisetoptions',\n  'omnisetshow',\n  'omnistepchange',\n  'omnistepchart',\n  'omniupdatejsondef',\n  'omnivalid',\n];\n\n/**\n * Types of requests that the postmessage can execute to native.\n */\nexport const requestTypes = {\n  loaded: 'loaded',\n  fnCall: 'fnCall',\n};\n\nexport const errorMessageEl = '#auraErrorMessage';\n\nexport const nativeRequest = {\n  setProps: 'setprops',\n  setElementProps: 'setelementprops',\n  callback: 'callback',\n  reload: 'reload',\n  error: 'error',\n};\n","import {\n  generateMobileMethods,\n  lwcConfigFromUrl,\n  postMessageToNativeApp,\n} from './utils';\nimport {createLwc, removeLwc, setChildrenProps, setProps} from './lwc';\nimport {\n  CreateLwcInput,\n  LwcMobile,\n  CallbackMap,\n  MobileMethod,\n  SetChildrenOptions,\n} from './types';\nimport {Loader} from './loader';\nimport {omniEvents} from './constants';\n\nexport class MobileVfpageSdk {\n  private callbacks: CallbackMap = new Map();\n  private loader: Loader;\n  private lwcElement: LwcMobile | null;\n  private mobileMethods: MobileMethod | null;\n  private lwcConfig: CreateLwcInput | null;\n\n  constructor() {\n    this.loader = new Loader();\n    this.lwcElement = null;\n    this.mobileMethods = null;\n    this.lwcConfig = null;\n\n    window.addEventListener('message', (event: any) =>\n      this.postMessageHandler(event),\n    );\n\n    this.init();\n  }\n\n  onLwcLoad = (\n    element: LwcMobile,\n    status: string,\n    lwcConfig: CreateLwcInput,\n  ) => {\n    this.loader.hide();\n    this.lwcConfig = lwcConfig;\n\n    if (status === 'SUCCESS') {\n      this.lwcElement = element;\n\n      this.mobileMethods = generateMobileMethods(\n        lwcConfig.methods,\n        this.callbacks,\n      );\n\n      element.mobileMethods = this.mobileMethods;\n      this.handleCustomEvents();\n      this.applyMethodstoRefs(lwcConfig.refs);\n      postMessageToNativeApp('loaded', {});\n    }\n  };\n\n  init() {\n    this.loader.show();\n    const lwcConfig = lwcConfigFromUrl();\n\n    createLwc(lwcConfig, this.onLwcLoad);\n  }\n\n  handleCustomEvents() {\n    /**\n     * Handle omniscript custom events.\n     */\n    omniEvents.forEach((omniEvent) => {\n      this.lwcElement?.addEventListener(omniEvent, (event: any) => {\n        postMessageToNativeApp('omniscriptEvent', {\n          name: omniEvent,\n          args: event.detail,\n          callId: '',\n        });\n      });\n    });\n\n    /**\n     * mobileaction is the only supported custom event if you want\n     * to communicate with the native app.\n     */\n    this.lwcElement?.addEventListener('mobileaction', (event: any) => {\n      postMessageToNativeApp('mobileAction', {\n        name: 'mobileaction',\n        args: event.detail,\n        callId: 'mobileaction',\n      });\n    });\n\n    /**\n     * Re-initialize adding of mobile methods to reference elements.\n     */\n    this.lwcElement?.addEventListener('initmobilemethods', (event: any) => {\n      this.refreshRefMethods(event.detail || []);\n    });\n  }\n\n  postMessageHandler(event: Event & CustomEvent & {data: any}) {\n    /**\n     * Custom event generated by lwc omniscript from their Messaging framework.\n     * It always includes OmniEleName.\n     */\n    if (event.detail && event.detail.OmniEleName) {\n      return postMessageToNativeApp('omniPostMessage', {\n        name: 'omnipostmessage',\n        args: event.detail,\n        callId: 'omnipostmessage',\n      });\n    }\n\n    if (!this.lwcElement) {\n      return false;\n    }\n\n    /**\n     * Making sure eventData is an Object literal.\n     */\n    const eventData = (() => {\n      try {\n        return JSON.parse(event.data);\n      } catch (e) {\n        return event.data;\n      }\n    })();\n\n    /**\n     * Request from native is to set a property on the root lwc.\n     */\n    if (eventData.type === 'setprops') {\n      return setProps(eventData.props, this.lwcElement);\n    }\n\n    /**\n     * Request from native is to set a property on the target child elements of the lwc.\n     */\n    if (eventData.type === 'setelementprops' && eventData.target) {\n      return setChildrenProps(eventData.target, this.lwcElement);\n    }\n\n    /**\n     * Request from native to reload the app\n     */\n    if (eventData.type === 'reload') {\n      removeLwc(eventData.props);\n      this.init();\n    }\n\n    const methodFn = this.callbacks.get(eventData.callId);\n    console.log(methodFn, eventData);\n\n    if (!methodFn) {\n      return false;\n    }\n    /**\n     * Request from native which resolves the promise and returns\n     * the response from the native.\n     */\n    if (eventData.type === 'callback' && eventData.callId !== 'omniscript') {\n      methodFn(eventData.response, null);\n    }\n\n    if (eventData.type === 'error') {\n      methodFn(null, eventData.message);\n    }\n  }\n\n  applyMethodstoRefs(refs: string[] | null | undefined) {\n    if (!refs || !refs.length) {\n      return false;\n    }\n    const refArray: SetChildrenOptions[] = refs.map((item: string) => {\n      return {\n        element: item,\n        props: {mobileMethods: this.mobileMethods},\n      };\n    });\n\n    return setTimeout(() => {\n      if (this.lwcElement) {\n        setChildrenProps(refArray, this.lwcElement);\n      }\n    }, 1000);\n  }\n\n  refreshRefMethods(additionalRefs: string[] = []) {\n    this.applyMethodstoRefs(\n      (this.lwcConfig?.refs || []).concat(additionalRefs),\n    );\n  }\n}\n","import {MobileVfpageSdk} from './sdk';\n\nnew MobileVfpageSdk();\n"]}