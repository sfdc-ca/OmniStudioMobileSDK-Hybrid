import {
  generateMobileMethods,
  lwcConfigFromUrl,
  postMessageToNativeApp,
} from './utils';
import {
  applyMethodstoRefs,
  createLwc,
  refreshRefMethods,
  removeLwc,
  setChildrenProps,
  setProps,
} from './lwc';
import {CreateLwcInput, LwcMobile, CallbackMap, MobileMethod} from './types';
import {Loader} from './loader';
import {omniEvents} from './constants';

export class MobileVfpageSdk {
  private callbacks: CallbackMap = new Map();
  private loader: Loader;
  private lwcElement: LwcMobile | null;
  private mobileMethods: MobileMethod | null;
  private lwcConfig: CreateLwcInput | null;

  constructor() {
    this.loader = new Loader();
    this.lwcElement = null;
    this.mobileMethods = null;
    this.lwcConfig = null;

    window.addEventListener('message', (event: any) =>
      this.postMessageHandler(event),
    );

    this.init();
  }

  onLwcLoad = (
    element: LwcMobile,
    status: string,
    lwcConfig: CreateLwcInput,
  ) => {
    this.loader.hide();
    this.lwcConfig = lwcConfig;

    if (status === 'SUCCESS') {
      this.lwcElement = element;

      this.mobileMethods = generateMobileMethods(
        lwcConfig.methods,
        this.callbacks,
      );

      element.mobileMethods = this.mobileMethods;
      this.handleCustomEvents();
      applyMethodstoRefs(lwcConfig.refs, this.mobileMethods, this.lwcElement);
      postMessageToNativeApp('loaded', {});
    }
  };

  init() {
    this.loader.show();
    const lwcConfig = lwcConfigFromUrl(window.location.search);

    createLwc(lwcConfig, this.onLwcLoad);
  }

  handleCustomEvents() {
    /**
     * Handle omniscript custom events.
     */
    omniEvents.forEach((omniEvent) => {
      this.lwcElement?.addEventListener(omniEvent, (event: any) => {
        postMessageToNativeApp('omniscriptEvent', {
          name: omniEvent,
          args: event.detail,
          callId: '',
        });
      });
    });

    /**
     * mobileaction is the only supported custom event if you want
     * to communicate with the native app.
     */
    this.lwcElement?.addEventListener('mobileaction', (event: any) => {
      postMessageToNativeApp('mobileAction', {
        name: 'mobileaction',
        args: event.detail,
        callId: 'mobileaction',
      });
    });

    /**
     * Re-initialize adding of mobile methods to reference elements.
     */
    this.lwcElement?.addEventListener('initmobilemethods', (event: any) => {
      refreshRefMethods(
        event.detail || [],
        this.mobileMethods,
        this.lwcElement,
        this.lwcConfig,
      );
    });
  }

  postMessageHandler(event: Event & CustomEvent & {data: any}) {
    /**
     * Custom event generated by lwc omniscript from their Messaging framework.
     * It always includes OmniEleName.
     */
    if (event.detail && event.detail.OmniEleName) {
      return postMessageToNativeApp('omniPostMessage', {
        name: 'omnipostmessage',
        args: event.detail,
        callId: 'omnipostmessage',
      });
    }

    if (!this.lwcElement) {
      return false;
    }

    /**
     * Making sure eventData is an Object literal.
     */
    const eventData = (() => {
      try {
        return JSON.parse(event.data);
      } catch (e) {
        return event.data;
      }
    })();

    /**
     * Request from native is to set a property on the root lwc.
     */
    if (eventData.type === 'setprops') {
      return setProps(eventData.props, this.lwcElement);
    }

    /**
     * Request from native is to set a property on the target child elements of the lwc.
     */
    if (eventData.type === 'setelementprops' && eventData.target) {
      return setChildrenProps(eventData.target, this.lwcElement);
    }

    /**
     * Request from native to reload the app
     */
    if (eventData.type === 'reload') {
      removeLwc(eventData.props);
      this.init();
    }

    const methodFn = this.callbacks.get(eventData.callId);

    if (!methodFn) {
      return false;
    }
    /**
     * Request from native which resolves the promise and returns
     * the response from the native.
     */
    if (eventData.type === 'callback' && eventData.callId !== 'omniscript') {
      methodFn(eventData.response, null);
    }

    if (eventData.type === 'error') {
      methodFn(null, eventData.message);
    }
  }
}
